// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"demo/ent/course"
	"demo/ent/enrollment"
	"demo/ent/predicate"
	"demo/ent/student"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnrollmentQuery is the builder for querying Enrollment entities.
type EnrollmentQuery struct {
	config
	ctx         *QueryContext
	order       []enrollment.OrderOption
	inters      []Interceptor
	predicates  []predicate.Enrollment
	withStudent *StudentQuery
	withCourse  *CourseQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnrollmentQuery builder.
func (eq *EnrollmentQuery) Where(ps ...predicate.Enrollment) *EnrollmentQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EnrollmentQuery) Limit(limit int) *EnrollmentQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EnrollmentQuery) Offset(offset int) *EnrollmentQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EnrollmentQuery) Unique(unique bool) *EnrollmentQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EnrollmentQuery) Order(o ...enrollment.OrderOption) *EnrollmentQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryStudent chains the current query on the "student" edge.
func (eq *EnrollmentQuery) QueryStudent() *StudentQuery {
	query := (&StudentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enrollment.Table, enrollment.FieldID, selector),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enrollment.StudentTable, enrollment.StudentColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (eq *EnrollmentQuery) QueryCourse() *CourseQuery {
	query := (&CourseClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enrollment.Table, enrollment.FieldID, selector),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enrollment.CourseTable, enrollment.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Enrollment entity from the query.
// Returns a *NotFoundError when no Enrollment was found.
func (eq *EnrollmentQuery) First(ctx context.Context) (*Enrollment, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enrollment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnrollmentQuery) FirstX(ctx context.Context) *Enrollment {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Enrollment ID from the query.
// Returns a *NotFoundError when no Enrollment ID was found.
func (eq *EnrollmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enrollment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnrollmentQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Enrollment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Enrollment entity is found.
// Returns a *NotFoundError when no Enrollment entities are found.
func (eq *EnrollmentQuery) Only(ctx context.Context) (*Enrollment, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enrollment.Label}
	default:
		return nil, &NotSingularError{enrollment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnrollmentQuery) OnlyX(ctx context.Context) *Enrollment {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Enrollment ID in the query.
// Returns a *NotSingularError when more than one Enrollment ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnrollmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enrollment.Label}
	default:
		err = &NotSingularError{enrollment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnrollmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Enrollments.
func (eq *EnrollmentQuery) All(ctx context.Context) ([]*Enrollment, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Enrollment, *EnrollmentQuery]()
	return withInterceptors[[]*Enrollment](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnrollmentQuery) AllX(ctx context.Context) []*Enrollment {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Enrollment IDs.
func (eq *EnrollmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(enrollment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnrollmentQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnrollmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EnrollmentQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnrollmentQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnrollmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnrollmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnrollmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnrollmentQuery) Clone() *EnrollmentQuery {
	if eq == nil {
		return nil
	}
	return &EnrollmentQuery{
		config:      eq.config,
		ctx:         eq.ctx.Clone(),
		order:       append([]enrollment.OrderOption{}, eq.order...),
		inters:      append([]Interceptor{}, eq.inters...),
		predicates:  append([]predicate.Enrollment{}, eq.predicates...),
		withStudent: eq.withStudent.Clone(),
		withCourse:  eq.withCourse.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithStudent tells the query-builder to eager-load the nodes that are connected to
// the "student" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnrollmentQuery) WithStudent(opts ...func(*StudentQuery)) *EnrollmentQuery {
	query := (&StudentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStudent = query
	return eq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnrollmentQuery) WithCourse(opts ...func(*CourseQuery)) *EnrollmentQuery {
	query := (&CourseClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCourse = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Semester string `json:"semester,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Enrollment.Query().
//		GroupBy(enrollment.FieldSemester).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EnrollmentQuery) GroupBy(field string, fields ...string) *EnrollmentGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnrollmentGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = enrollment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Semester string `json:"semester,omitempty"`
//	}
//
//	client.Enrollment.Query().
//		Select(enrollment.FieldSemester).
//		Scan(ctx, &v)
func (eq *EnrollmentQuery) Select(fields ...string) *EnrollmentSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EnrollmentSelect{EnrollmentQuery: eq}
	sbuild.label = enrollment.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnrollmentSelect configured with the given aggregations.
func (eq *EnrollmentQuery) Aggregate(fns ...AggregateFunc) *EnrollmentSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EnrollmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !enrollment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnrollmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Enrollment, error) {
	var (
		nodes       = []*Enrollment{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [2]bool{
			eq.withStudent != nil,
			eq.withCourse != nil,
		}
	)
	if eq.withStudent != nil || eq.withCourse != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, enrollment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Enrollment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Enrollment{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withStudent; query != nil {
		if err := eq.loadStudent(ctx, query, nodes, nil,
			func(n *Enrollment, e *Student) { n.Edges.Student = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCourse; query != nil {
		if err := eq.loadCourse(ctx, query, nodes, nil,
			func(n *Enrollment, e *Course) { n.Edges.Course = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EnrollmentQuery) loadStudent(ctx context.Context, query *StudentQuery, nodes []*Enrollment, init func(*Enrollment), assign func(*Enrollment, *Student)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Enrollment)
	for i := range nodes {
		if nodes[i].student_enrollments == nil {
			continue
		}
		fk := *nodes[i].student_enrollments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(student.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "student_enrollments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EnrollmentQuery) loadCourse(ctx context.Context, query *CourseQuery, nodes []*Enrollment, init func(*Enrollment), assign func(*Enrollment, *Course)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Enrollment)
	for i := range nodes {
		if nodes[i].course_enrollments == nil {
			continue
		}
		fk := *nodes[i].course_enrollments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(course.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_enrollments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *EnrollmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnrollmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeInt))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrollment.FieldID)
		for i := range fields {
			if fields[i] != enrollment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EnrollmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(enrollment.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = enrollment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EnrollmentGroupBy is the group-by builder for Enrollment entities.
type EnrollmentGroupBy struct {
	selector
	build *EnrollmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnrollmentGroupBy) Aggregate(fns ...AggregateFunc) *EnrollmentGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EnrollmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnrollmentQuery, *EnrollmentGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EnrollmentGroupBy) sqlScan(ctx context.Context, root *EnrollmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnrollmentSelect is the builder for selecting fields of Enrollment entities.
type EnrollmentSelect struct {
	*EnrollmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EnrollmentSelect) Aggregate(fns ...AggregateFunc) *EnrollmentSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnrollmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnrollmentQuery, *EnrollmentSelect](ctx, es.EnrollmentQuery, es, es.inters, v)
}

func (es *EnrollmentSelect) sqlScan(ctx context.Context, root *EnrollmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
